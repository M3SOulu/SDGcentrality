{
    "nodes": {
        "invoicing": {
            "file": "/Users/abakhtin22/Documents/TempNet/code2DFD/analysed_repositories/microservice-kafka/microservice-kafka/microservice-kafka-invoicing/src/main/resources/application.properties",
            "line": 4,
            "span": "(24:33)",
            "sub_items": {
                "Port": {
                    "file": "/Users/abakhtin22/Documents/TempNet/code2DFD/analysed_repositories/microservice-kafka/microservice-kafka/microservice-kafka-invoicing/src/main/resources/application.properties",
                    "line": 2,
                    "span": "(0, 11)"
                },
                "local_logging": {
                    "file": "microservice-kafka/microservice-kafka-invoicing/src/main/java/com/ewolff/microservice/invoicing/events/OrderKafkaListener.java",
                    "line": "4",
                    "span": "(17, 30)"
                },
                "internal": {
                    "file": "heuristic",
                    "line": "heuristic",
                    "span": "heuristic"
                }
            }
        },
        "order": {
            "file": "/Users/abakhtin22/Documents/TempNet/code2DFD/analysed_repositories/microservice-kafka/microservice-kafka/microservice-kafka-order/src/main/resources/application.properties",
            "line": 4,
            "span": "(24:29)",
            "sub_items": {
                "Port": {
                    "file": "/Users/abakhtin22/Documents/TempNet/code2DFD/analysed_repositories/microservice-kafka/microservice-kafka/microservice-kafka-order/src/main/resources/application.properties",
                    "line": 2,
                    "span": "(0, 11)"
                },
                "internal": {
                    "file": "heuristic",
                    "line": "heuristic",
                    "span": "heuristic"
                }
            }
        },
        "shipping": {
            "file": "/Users/abakhtin22/Documents/TempNet/code2DFD/analysed_repositories/microservice-kafka/microservice-kafka/microservice-kafka-shipping/src/main/resources/application.properties",
            "line": 4,
            "span": "(24:32)",
            "sub_items": {
                "Port": {
                    "file": "/Users/abakhtin22/Documents/TempNet/code2DFD/analysed_repositories/microservice-kafka/microservice-kafka/microservice-kafka-shipping/src/main/resources/application.properties",
                    "line": 2,
                    "span": "(0, 11)"
                },
                "local_logging": {
                    "file": "microservice-kafka/microservice-kafka-shipping/src/main/java/com/ewolff/microservice/shipping/events/OrderKafkaListener.java",
                    "line": "4",
                    "span": "(17, 30)"
                },
                "internal": {
                    "file": "heuristic",
                    "line": "heuristic",
                    "span": "heuristic"
                }
            }
        },
        "zookeeper": {
            "file": "docker/docker-compose.yml",
            "line": 3,
            "span": "[2:11]",
            "sub_items": {
                "infrastructural": {
                    "file": "heuristic, based on stereotype configuration_server",
                    "line": "heuristic, based on stereotype configuration_server",
                    "span": "heuristic, based on stereotype configuration_server"
                }
            }
        },
        "kafka": {
            "file": "docker/docker-compose.yml",
            "line": 5,
            "span": "[2:7]",
            "sub_items": {
                "message_broker": {
                    "file": "heuristic, based on image in Docker Compose",
                    "line": "heuristic, based on image in Docker Compose",
                    "span": "heuristic, based on image in Docker Compose"
                },
                "infrastructural": {
                    "file": "heuristic, based on stereotype message_broker",
                    "line": "heuristic, based on stereotype message_broker",
                    "span": "heuristic, based on stereotype message_broker"
                }
            }
        },
        "apache": {
            "file": "docker/docker-compose.yml",
            "line": 15,
            "span": "[2:8]",
            "sub_items": {
                "infrastructural": {
                    "file": "heuristic, based on stereotype web_server",
                    "line": "heuristic, based on stereotype web_server",
                    "span": "heuristic, based on stereotype web_server"
                }
            }
        },
        "postgres": {
            "file": "docker/docker-compose.yml",
            "line": 23,
            "span": "[2:10]",
            "sub_items": {
                "database": {
                    "file": "heuristic, based on Dockerfile base image",
                    "line": "heuristic, based on Dockerfile base image",
                    "span": "heuristic, based on Dockerfile base image"
                },
                "plaintext_credentials": {
                    "file": "docker/docker-compose.yml",
                    "line": 26,
                    "span": "[25:31]"
                }
            }
        },
        "web_server": {
            "file": "docker/apache/Dockerfile",
            "line": 17,
            "span": "(4, 14)"
        },
        "user": {
            "file": "implicit",
            "line": "implicit",
            "span": "implicit",
            "sub_items": {
                "user_stereotype": {
                    "file": "implicit",
                    "line": "implicit",
                    "span": "implicit"
                },
                "entrypoint": {
                    "file": "heuristic",
                    "line": "heuristic",
                    "span": "heuristic"
                },
                "exitpoint": {
                    "file": "heuristic",
                    "line": "heuristic",
                    "span": "heuristic"
                }
            }
        }
    },
    "edges": {
        "kafka -> shipping": {
            "file": "OrderKafkaListener.java",
            "line": 23,
            "span": "<re.Match object; span=(1, 15), match='@KafkaListener'>"
        },
        "kafka -> invoicing": {
            "file": "OrderKafkaListener.java",
            "line": 23,
            "span": "<re.Match object; span=(1, 15), match='@KafkaListener'>"
        },
        "order -> kafka": {
            "file": "microservice-kafka/microservice-kafka-order/src/main/java/com/ewolff/microservice/order/logic/OrderService.java",
            "line": 31,
            "span": "<re.Match object; span=(2, 20), match='kafkaTemplate.send'>"
        },
        "postgres -> invoicing": {
            "file": "/Users/abakhtin22/Documents/TempNet/code2DFD/analysed_repositories/microservice-kafka/microservice-kafka/microservice-kafka-invoicing/src/main/resources/application.properties",
            "line": 10,
            "span": "(0, 21)"
        },
        "postgres -> order": {
            "file": "/Users/abakhtin22/Documents/TempNet/code2DFD/analysed_repositories/microservice-kafka/microservice-kafka/microservice-kafka-order/src/main/resources/application.properties",
            "line": 8,
            "span": "(0, 21)"
        },
        "postgres -> shipping": {
            "file": "/Users/abakhtin22/Documents/TempNet/code2DFD/analysed_repositories/microservice-kafka/microservice-kafka/microservice-kafka-shipping/src/main/resources/application.properties",
            "line": 10,
            "span": "(0, 21)"
        },
        "order -> order": {
            "file": "microservice-kafka/microservice-kafka-order/src/main/resources/templates/orderlist.html",
            "line": "25",
            "span": "(12, 16)"
        },
        "user -> apache": {
            "file": "implicit",
            "line": "implicit",
            "span": "implicit"
        },
        "apache -> user": {
            "file": "implicit",
            "line": "implicit",
            "span": "implicit"
        }
    }
}