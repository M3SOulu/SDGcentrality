from codeable_models import CClass, CBundle, add_links, CStereotype, CMetaclass, CEnum, CAttribute 
from metamodels.microservice_dfds_metamodel import * 
from plant_uml_renderer import PlantUMLGenerator 
plantuml_path = "../../plantuml.jar" 
output_directory = "." 
model_name = "piggymetrics_6bb2cf9"
statistics_service = CClass(service, "statistics-service", stereotype_instances = [local_logging, internal, pre_authorized_endpoints, resource_server], tagged_values = {'Pre-authorized Endpoints': "['/{accountName}']", 'Port': 7000, 'Endpoints': "['/latest', '/{accountName}', '/current']"})
account_service = CClass(service, "account-service", stereotype_instances = [local_logging, resource_server, pre_authorized_endpoints, internal, circuit_breaker], tagged_values = {'Endpoints': "['/uaa/users', '/statistics/{accountName}', '/', '/{name}', '/current']", 'Circuit Breaker': 'Hystrix', 'Pre-authorized Endpoints': "['/{name}']", 'Port': 6000})
notification_service = CClass(service, "notification-service", stereotype_instances = [local_logging, internal, resource_server], tagged_values = {'Port': 8000, 'Endpoints': "['/recipients/current', '/recipients', '/accounts/{accountName}']"})
config = CClass(service, "config", stereotype_instances = [infrastructural, plaintext_credentials, configuration_server, basic_authentication, csrf_disabled], tagged_values = {'Port': 8888, 'Password': 'password\n', 'Configuration Server': 'Spring Cloud Config', 'Username': 'user'})
turbine_stream_service = CClass(service, "turbine-stream-service", stereotype_instances = [infrastructural, monitoring_server], tagged_values = {'Port': 8989, 'Monitoring Server': 'Turbine'})
registry = CClass(service, "registry", stereotype_instances = [infrastructural, service_discovery], tagged_values = {'Service Discovery': 'Eureka', 'Port': 8761})
monitoring = CClass(service, "monitoring", stereotype_instances = [infrastructural, monitoring_dashboard], tagged_values = {'Monitoring Dashboard': 'Hystrix', 'Port': 8080})
auth_service = CClass(service, "auth-service", stereotype_instances = [infrastructural, authentication_scope_all_requests, local_logging, csrf_disabled, resource_server, authorization_server, encryption, pre_authorized_endpoints, token_server], tagged_values = {'Port': 5000, 'Authorization Server': 'Spring OAuth2', 'Endpoints': "['/users/current', '/users']"})
gateway = CClass(service, "gateway", stereotype_instances = [infrastructural, load_balancer, gateway], tagged_values = {'Port': 4000, 'Load Balancer': 'Ribbon', 'Gateway': 'Zuul'})
auth_mongodb = CClass(service, "auth-mongodb", stereotype_instances = [plaintext_credentials, database], tagged_values = {'Password': 'password\n', 'Username': 'user'})
rabbitmq = CClass(service, "rabbitmq", stereotype_instances = [message_broker, infrastructural], tagged_values = {'Port': 15672, 'Message Broker': 'RabbitMQ'})
notification_mongodb = CClass(service, "notification-mongodb", stereotype_instances = [plaintext_credentials, database], tagged_values = {'Password': 'password\n', 'Username': 'user'})
statistics_mongodb = CClass(service, "statistics-mongodb", stereotype_instances = [plaintext_credentials, database], tagged_values = {'Password': 'password\n', 'Username': 'user'})
account_mongodb = CClass(service, "account-mongodb", stereotype_instances = [plaintext_credentials, database], tagged_values = {'Password': 'password\n', 'Username': 'user'})
user = CClass(external_component, "user", stereotype_instances = [user_stereotype, entrypoint, exitpoint])
external_website = CClass(external_component, "external-website", stereotype_instances = [external_website, entrypoint, exitpoint], tagged_values = {'URL': 'https://api.exchangeratesapi.io'})
mail_server = CClass(external_component, "mail-server", stereotype_instances = [plaintext_credentials, mail_server, exitpoint, entrypoint], tagged_values = {'Host': 'smtp.gmail.com', 'Password': 'dev-password', 'Username': 'dev-user'})
add_links({config: statistics_service}, stereotype_instances = [restful_http, plaintext_credentials_link])
add_links({config: account_service}, stereotype_instances = [restful_http, plaintext_credentials_link])
add_links({config: notification_service}, stereotype_instances = [restful_http, plaintext_credentials_link])
add_links({config: turbine_stream_service}, stereotype_instances = [restful_http, plaintext_credentials_link])
add_links({config: registry}, stereotype_instances = [restful_http, plaintext_credentials_link])
add_links({config: monitoring}, stereotype_instances = [restful_http, plaintext_credentials_link])
add_links({config: auth_service}, stereotype_instances = [restful_http, plaintext_credentials_link])
add_links({config: gateway}, stereotype_instances = [restful_http, plaintext_credentials_link])
add_links({statistics_mongodb: statistics_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Password': 'password', 'Username': 'user'})
add_links({account_mongodb: account_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Password': 'password', 'Username': 'user'})
add_links({notification_mongodb: notification_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Password': 'password', 'Username': 'user'})
add_links({auth_mongodb: auth_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Password': 'password', 'Username': 'user'})
add_links({registry: gateway}, stereotype_instances = [restful_http])
add_links({auth_service: registry}, stereotype_instances = [restful_http])
add_links({account_service: registry}, stereotype_instances = [restful_http, circuit_breaker_link], tagged_values = {'Circuit Breaker': 'Hystrix'})
add_links({notification_service: registry}, stereotype_instances = [restful_http])
add_links({turbine_stream_service: registry}, stereotype_instances = [restful_http])
add_links({statistics_service: registry}, stereotype_instances = [restful_http])
add_links({user: gateway}, stereotype_instances = [restful_http])
add_links({gateway: user}, stereotype_instances = [restful_http])
add_links({gateway: statistics_service}, stereotype_instances = [restful_http, load_balanced_link, circuit_breaker_link], tagged_values = {'Load Balancer': 'Ribbon', 'Circuit Breaker': 'Hystrix'})
add_links({gateway: auth_service}, stereotype_instances = [restful_http, load_balanced_link, circuit_breaker_link], tagged_values = {'Load Balancer': 'Ribbon', 'Circuit Breaker': 'Hystrix'})
add_links({gateway: account_service}, stereotype_instances = [restful_http, load_balanced_link, circuit_breaker_link], tagged_values = {'Load Balancer': 'Ribbon', 'Circuit Breaker': 'Hystrix'})
add_links({gateway: notification_service}, stereotype_instances = [restful_http, load_balanced_link, circuit_breaker_link], tagged_values = {'Load Balancer': 'Ribbon', 'Circuit Breaker': 'Hystrix'})
add_links({auth_service: statistics_service}, stereotype_instances = [auth_provider, restful_http, plaintext_credentials_link, authentication_with_plaintext_credentials], tagged_values = {'Password': 'password\n'})
add_links({auth_service: account_service}, stereotype_instances = [auth_provider, restful_http, plaintext_credentials_link, authentication_with_plaintext_credentials], tagged_values = {'Password': 'password\n'})
add_links({auth_service: notification_service}, stereotype_instances = [auth_provider, restful_http, plaintext_credentials_link, authentication_with_plaintext_credentials], tagged_values = {'Password': 'password\n'})
add_links({turbine_stream_service: monitoring}, stereotype_instances = [restful_http])
add_links({rabbitmq: turbine_stream_service}, stereotype_instances = [restful_http])
add_links({statistics_service: rabbitmq}, stereotype_instances = [restful_http])
add_links({account_service: rabbitmq}, stereotype_instances = [restful_http, circuit_breaker_link], tagged_values = {'Circuit Breaker': 'Hystrix'})
add_links({notification_service: rabbitmq}, stereotype_instances = [restful_http])
add_links({external_website: statistics_service}, stereotype_instances = [restful_http])
add_links({notification_service: mail_server}, stereotype_instances = [restful_http, plaintext_credentials_link])
model = CBundle(model_name, elements = account_mongodb.class_object.get_connected_elements())
def run():
    generator = PlantUMLGenerator()
    generator.plant_uml_jar_path = plantuml_path
    generator.directory = output_directory
    generator.object_model_renderer.left_to_right = True
    generator.generate_object_models(model_name, [model, {}])
    print(f"Generated models in {generator.directory!s}/" + model_name)
if __name__ == "__main__":
    run()