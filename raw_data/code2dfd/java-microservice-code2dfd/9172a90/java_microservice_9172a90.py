from codeable_models import CClass, CBundle, add_links, CStereotype, CMetaclass, CEnum, CAttribute 
from metamodels.microservice_dfds_metamodel import * 
from plant_uml_renderer import PlantUMLGenerator 
plantuml_path = "../../plantuml.jar" 
output_directory = "." 
model_name = "java-microservice_9172a90"
oauth = CClass(service, "oauth", stereotype_instances = [authorization_server, infrastructural, circuit_breaker], tagged_values = {'Circuit Breaker': 'Hystrix', 'Port': 8017, 'Authorization Server': 'Spring OAuth2'})
jmx_monitoring = CClass(service, "jmx-monitoring", stereotype_instances = [internal])
admin = CClass(service, "admin", stereotype_instances = [infrastructural, administration_server], tagged_values = {'Port': 8026, 'Administration Server': 'Spring Boot Admin'})
api_gateway = CClass(service, "api-gateway", stereotype_instances = [csrf_disabled, resource_server, internal, circuit_breaker], tagged_values = {'Circuit Breaker': 'Hystrix', 'Port': 8018})
eureka_server = CClass(service, "eureka-server", stereotype_instances = [service_discovery, infrastructural], tagged_values = {'Port': 8013, 'Service Discovery': 'Eureka'})
mailer = CClass(service, "mailer", stereotype_instances = [internal], tagged_values = {'Port': 8020})
todo_infra = CClass(service, "todo-infra", stereotype_instances = [internal])
user = CClass(service, "user", stereotype_instances = [internal], tagged_values = {'Port': 8016})
config_server = CClass(service, "config-server", stereotype_instances = [configuration_server, infrastructural], tagged_values = {'Configuration Server': 'Spring Cloud Config', 'Port': 8888})
reminder = CClass(service, "reminder", stereotype_instances = [internal], tagged_values = {'Port': 8015})
zookeeper = CClass(service, "zookeeper", stereotype_instances = [configuration_server, infrastructural], tagged_values = {'Configuration Server': 'ZooKeeper', 'Port': 2181})
kafka = CClass(service, "kafka", stereotype_instances = [message_broker, infrastructural], tagged_values = {'Message Broker': 'Kafka'})
web_app = CClass(service, "web-app", stereotype_instances = [infrastructural, web_application], tagged_values = {'Web Application': 'Nginx'})
github_repository = CClass(external_component, "github-repository", stereotype_instances = [entrypoint, github_repository], tagged_values = {'URL': 'https://github.com/apssouza22/java-microservice'})
logstash = CClass(external_component, "logstash", stereotype_instances = [logging_server, exitpoint], tagged_values = {'Port': 5044, 'Logging Server': 'Logstash'})
add_links({github_repository: config_server}, stereotype_instances = [restful_http])
add_links({config_server: oauth}, stereotype_instances = [restful_http])
add_links({config_server: admin}, stereotype_instances = [restful_http])
add_links({config_server: api_gateway}, stereotype_instances = [restful_http])
add_links({config_server: eureka_server}, stereotype_instances = [restful_http])
add_links({config_server: mailer}, stereotype_instances = [restful_http])
add_links({config_server: user}, stereotype_instances = [restful_http])
add_links({config_server: reminder}, stereotype_instances = [restful_http])
add_links({kafka: mailer}, stereotype_instances = [message_consumer_kafka, restful_http], tagged_values = {'Consumer Topic': 'todo-mail'})
add_links({reminder: kafka}, stereotype_instances = [message_producer_kafka, restful_http], tagged_values = {'Producer Topic': 'todo-mail'})
add_links({reminder: eureka_server}, stereotype_instances = [restful_http])
add_links({oauth: eureka_server}, stereotype_instances = [restful_http])
add_links({api_gateway: eureka_server}, stereotype_instances = [restful_http])
add_links({mailer: eureka_server}, stereotype_instances = [restful_http])
add_links({admin: eureka_server}, stereotype_instances = [restful_http])
add_links({user: eureka_server}, stereotype_instances = [restful_http])
add_links({admin: oauth}, stereotype_instances = [restful_http])
add_links({admin: api_gateway}, stereotype_instances = [restful_http])
add_links({admin: mailer}, stereotype_instances = [restful_http])
add_links({admin: user}, stereotype_instances = [restful_http])
add_links({admin: reminder}, stereotype_instances = [restful_http])
add_links({zookeeper: kafka}, stereotype_instances = [restful_http])
add_links({oauth: logstash}, stereotype_instances = [restful_http])
add_links({admin: logstash}, stereotype_instances = [restful_http])
add_links({api_gateway: logstash}, stereotype_instances = [restful_http])
add_links({eureka_server: logstash}, stereotype_instances = [restful_http])
add_links({mailer: logstash}, stereotype_instances = [restful_http])
add_links({user: logstash}, stereotype_instances = [restful_http])
add_links({config_server: logstash}, stereotype_instances = [restful_http])
add_links({reminder: logstash}, stereotype_instances = [restful_http])
add_links({zookeeper: oauth}, stereotype_instances = [restful_http])
add_links({zookeeper: admin}, stereotype_instances = [restful_http])
add_links({zookeeper: api_gateway}, stereotype_instances = [restful_http])
add_links({zookeeper: eureka_server}, stereotype_instances = [restful_http])
add_links({zookeeper: mailer}, stereotype_instances = [restful_http])
add_links({zookeeper: user}, stereotype_instances = [restful_http])
add_links({zookeeper: reminder}, stereotype_instances = [restful_http])
model = CBundle(model_name, elements = web_app.class_object.get_connected_elements())
def run():
    generator = PlantUMLGenerator()
    generator.plant_uml_jar_path = plantuml_path
    generator.directory = output_directory
    generator.object_model_renderer.left_to_right = True
    generator.generate_object_models(model_name, [model, {}])
    print(f"Generated models in {generator.directory!s}/" + model_name)
if __name__ == "__main__":
    run()