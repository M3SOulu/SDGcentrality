from codeable_models import CClass, CBundle, add_links, CStereotype, CMetaclass, CEnum, CAttribute 
from metamodels.microservice_dfds_metamodel import * 
from plant_uml_renderer import PlantUMLGenerator 
plantuml_path = "../../plantuml.jar" 
output_directory = "." 
model_name = "train-ticket_228066f"
ts_contacts_service = CClass(service, "ts-contacts-service", stereotype_instances = [internal, basic_authentication, csrf_disabled, local_logging], tagged_values = {'Endpoints': "['/api/v1/contactservice/contacts/admin', '/api/v1/contactservice/contacts/{contactsId}', '/api/v1/contactservice/contacts', '/api/v1/contactservice/contacts/welcome', '/api/v1/contactservice', '/api/v1/contactservice/contacts/account/{accountId}', '/api/v1/contactservice/contacts/{id}']", 'Logging Technology': 'Lombok', 'Port': 12347})
ts_admin_user_service = CClass(service, "ts-admin-user-service", stereotype_instances = [internal, basic_authentication, csrf_disabled, local_logging], tagged_values = {'Logging Technology': 'Lombok', 'Port': 16115, 'Endpoints': "['/api/v1/adminuserservice/users', '/api/v1/adminuserservice/users/{userId}', '/api/v1/adminuserservice/users/welcome']"})
ts_food_map_service = CClass(service, "ts-food-map-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Endpoints': "['/api/v1/foodmapservice/foodstores/welcome', '/api/v1/foodmapservice/trainfoods/{tripId}', '/api/v1/foodmapservice/trainfoods/welcome', '/api/v1/foodmapservice/foodstores/{stationId}', '/api/v1/foodmapservice/foodstores', '/api/v1/foodmapservice', '/api/v1/foodmapservice/trainfoods']", 'Port': 18855})
ts_notification_service = CClass(service, "ts-notification-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Port': 17853, 'Endpoints': "['/api/v1/notifyservice/notification/order_create_success', '/api/v1/notifyservice/notification/order_cancel_success', '/api/v1/notifyservice', '/api/v1/notifyservice/welcome', '/api/v1/notifyservice/notification/preserve_success', '/api/v1/notifyservice/notification/order_changed_success']"})
ts_cancel_service = CClass(service, "ts-cancel-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Port': 18885, 'Endpoints': "['/api/v1/cancelservice/welcome', '/api/v1/cancelservice/cancel/{orderId}/{loginId}', '/api/v1/cancelservice/cancel/refound/{orderId}', '/api/v1/cancelservice']"})
ts_config_service = CClass(service, "ts-config-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Endpoints': "['/api/v1/configservice/configs', '/api/v1/configservice/welcome', '/api/v1/configservice/configs/{configName}', '/api/v1/configservice', '/api/v1/configservice/config/query']", 'Port': 15679})
ts_assurance_service = CClass(service, "ts-assurance-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Endpoints': "['/api/v1/assuranceservice', '/api/v1/assuranceservice/assurances/orderid/{orderId}', '/api/v1/assuranceservice/assurances/{typeIndex}/{orderId}', '/api/v1/assuranceservice/assurances/assuranceid/{assuranceId}', '/api/v1/assuranceservice/assurances/{assuranceId}/{orderId}/{typeIndex}', '/api/v1/assuranceservice/assurances/types', '/api/v1/assuranceservice/assurances', '/api/v1/assuranceservice/welcome', '/api/v1/assuranceservice/assurance/orderid/{orderId}']", 'Port': 18888})
ts_order_other_service = CClass(service, "ts-order-other-service", stereotype_instances = [internal, basic_authentication, csrf_disabled, local_logging], tagged_values = {'Endpoints': "['/api/v1/orderOtherService/orderOther/{travelDate}/{trainNumber}', '/api/v1/orderOtherService/orderOther/tickets', '/api/v1/orderOtherService/orderOther/price/{orderId}', '/api/v1/orderOtherService/orderOther/query', '/api/v1/orderOtherService/orderOther', '/api/v1/orderOtherService/orderOther/admin', '/api/v1/orderOtherService/welcome', '/api/v1/orderOtherService', '/api/v1/orderOtherService/orderOther/{orderId}', '/api/v1/orderOtherService/orderOther/status/{orderId}/{status}', '/api/v1/orderOtherService/orderOther/security/{checkDate}/{accountId}', '/api/v1/orderOtherService/orderOther/orderPay/{orderId}', '/api/v1/orderOtherService/orderOther/refresh']", 'Logging Technology': 'Lombok', 'Port': 12032})
ts_route_service = CClass(service, "ts-route-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Port': 11178, 'Endpoints': "['/api/v1/routeservice/routes/{startId}/{terminalId}', '/api/v1/routeservice/routes', '/api/v1/routeservice/welcome', '/api/v1/routeservice', '/api/v1/routeservice/routes/{routeId}']"})
ts_price_service = CClass(service, "ts-price-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Port': 16579, 'Endpoints': "['/api/v1/priceservice', '/api/v1/priceservice/prices/{routeId}/{trainType}', '/api/v1/priceservice/prices', '/api/v1/priceservice/prices/welcome']"})
ts_preserve_service = CClass(service, "ts-preserve-service", stereotype_instances = [internal, basic_authentication, csrf_disabled, local_logging], tagged_values = {'Logging Technology': 'Lombok', 'Port': 14568, 'Endpoints': "['/api/v1/preserveservice/preserve', '/api/v1/preserveservice/welcome', '/api/v1/preserveservice']"})
micro_service_monitoring_core = CClass(service, "micro-service-monitoring-core", stereotype_instances = [internal, local_logging])
ts_security_service = CClass(service, "ts-security-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Endpoints': "['/api/v1/securityservice/securityConfigs', '/api/v1/securityservice/securityConfigs/{accountId}', '/api/v1/securityservice/welcome', '/api/v1/securityservice/securityConfigs/{id}', '/api/v1/securityservice']", 'Port': 11188})
ts_consign_service = CClass(service, "ts-consign-service", stereotype_instances = [internal, basic_authentication, csrf_disabled, local_logging], tagged_values = {'Port': 16111, 'Logging Technology': 'Lombok', 'Endpoints': "['/api/v1/consignservice/consigns/{consignee}', '/api/v1/consignservice/consigns/account/{id}', '/api/v1/consignservice', '/api/v1/consignservice/welcome', '/api/v1/consignservice/consigns/order/{id}', '/api/v1/consignservice/consigns']"})
ts_train_service = CClass(service, "ts-train-service", stereotype_instances = [internal, basic_authentication, csrf_disabled, local_logging], tagged_values = {'Endpoints': "['/api/v1/trainservice', '/api/v1/trainservice/trains', '/api/v1/trainservice/trains/{id}', '/api/v1/trainservice/trains/welcome']", 'Port': 14567})
ts_order_service = CClass(service, "ts-order-service", stereotype_instances = [internal, basic_authentication, csrf_disabled, local_logging], tagged_values = {'Endpoints': "['/api/v1/orderservice/order/refresh', '/api/v1/orderservice/order/security/{checkDate}/{accountId}', '/api/v1/orderservice/order/status/{orderId}/{status}', '/api/v1/orderservice/order/{orderId}', '/api/v1/orderservice', '/api/v1/orderservice/order', '/api/v1/orderservice/order/price/{orderId}', '/api/v1/orderservice/order/{travelDate}/{trainNumber}', '/api/v1/orderservice/order/query', '/api/v1/orderservice/order/orderPay/{orderId}', '/api/v1/orderservice/order/tickets', '/api/v1/orderservice/order/admin', '/api/v1/orderservice/welcome']", 'Logging Technology': 'Lombok', 'Port': 12031})
ts_verification_code_service = CClass(service, "ts-verification-code-service", stereotype_instances = [internal, local_logging], tagged_values = {'Port': 15678, 'Endpoints': "['/api/v1/verifycode/verify/{verifyCode}', '/api/v1/verifycode', '/api/v1/verifycode/generate']", 'Logging Technology': 'Lombok'})
ts_food_service = CClass(service, "ts-food-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Port': 18856, 'Endpoints': "['/api/v1/foodservice/foods/{date}/{startStation}/{endStation}/{tripId}', '/api/v1/foodservice/orders/{orderId}', '/api/v1/foodservice/orders', '/api/v1/foodservice', '/api/v1/foodservice/welcome']"})
ts_rebook_service = CClass(service, "ts-rebook-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Port': 18886, 'Endpoints': "['/api/v1/rebookservice/rebook/difference', '/api/v1/rebookservice/welcome', '/api/v1/rebookservice/rebook', '/api/v1/rebookservice']"})
rest_service_5 = CClass(service, "rest-service-5", stereotype_instances = [internal, local_logging], tagged_values = {'Port': 16005, 'Endpoints': "['/monitor', '/hello5']"})
rest_service_2 = CClass(service, "rest-service-2", stereotype_instances = [internal, local_logging], tagged_values = {'Endpoints': "['/hello', '/hello2']", 'Port': 16002})
rest_service_collector = CClass(service, "rest-service-collector", stereotype_instances = [internal, local_logging], tagged_values = {'Port': 16001, 'Endpoints': "['/**', '/api/v1/spans', '/api/**']"})
rest_service_3 = CClass(service, "rest-service-3", stereotype_instances = [internal, local_logging], tagged_values = {'Endpoints': "['/hello', '/hello3']", 'Port': 16003})
rest_service_4 = CClass(service, "rest-service-4", stereotype_instances = [internal, local_logging], tagged_values = {'Port': 16004, 'Endpoints': "['/getdata1', '/getdata', '/hello4']"})
rest_service_1 = CClass(service, "rest-service-1", stereotype_instances = [internal, local_logging], tagged_values = {'Endpoints': "['/hello', '/hello1']", 'Port': 16001})
rest_service_6 = CClass(service, "rest-service-6", stereotype_instances = [internal, local_logging], tagged_values = {'Endpoints': "['/hello6_1', '/hello6']", 'Port': 16006})
rest_service_end = CClass(service, "rest-service-end", stereotype_instances = [internal, local_logging], tagged_values = {'Port': 16000, 'Endpoints': "['/test', '/greeting']"})
ts_ui_test = CClass(service, "ts-ui-test", stereotype_instances = [internal])
spring_transaction_consumer = CClass(service, "spring-transaction-consumer", stereotype_instances = [internal])
ts_admin_basic_info_service = CClass(service, "ts-admin-basic-info-service", stereotype_instances = [internal, basic_authentication, csrf_disabled, local_logging], tagged_values = {'Endpoints': "['/api/v1/adminbasicservice/adminbasic/stations', '/api/v1/adminbasicservice/adminbasic/contacts', '/api/v1/adminbasicservice/adminbasic/contacts/{contactsId}', '/api/v1/adminbasicservice', '/api/v1/adminbasicservice/adminbasic/prices', '/api/v1/adminbasicservice/adminbasic/configs', '/api/v1/adminbasicservice/welcome', '/api/v1/adminbasicservice/adminbasic/trains', '/api/v1/adminbasicservice/adminbasic/trains/{id}', '/api/v1/adminbasicservice/adminbasic/configs/{name}']", 'Port': 18767, 'Logging Technology': 'Lombok'})
ts_consign_price_service = CClass(service, "ts-consign-price-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Endpoints': "['/api/v1/consignpriceservice/welcome', '/api/v1/consignpriceservice/consignprice/config', '/api/v1/consignpriceservice/consignprice/price', '/api/v1/consignpriceservice/consignprice/{weight}/{isWithinRegion}', '/api/v1/consignpriceservice', '/api/v1/consignpriceservice/consignprice']", 'Port': 16110})
ts_basic_service = CClass(service, "ts-basic-service", stereotype_instances = [internal, basic_authentication, csrf_disabled, local_logging], tagged_values = {'Endpoints': "['/api/v1/basicservice/welcome', '/api/v1/basicservice/basic/travel', '/api/v1/basicservice/basic/{stationName}', '/api/v1/basicservice']", 'Port': 15680, 'Logging Technology': 'Lombok'})
ts_preserve_other_service = CClass(service, "ts-preserve-other-service", stereotype_instances = [internal, basic_authentication, csrf_disabled, local_logging], tagged_values = {'Endpoints': "['/api/v1/preserveotherservice', '/api/v1/preserveotherservice/preserveOther', '/api/v1/preserveotherservice/welcome']", 'Logging Technology': 'Lombok', 'Port': 14569})
ts_common = CClass(service, "ts-common", stereotype_instances = [internal, local_logging], tagged_values = {'Logging Technology': 'Lombok'})
ts_station_service = CClass(service, "ts-station-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Port': 12345, 'Endpoints': "['/api/v1/stationservice/stations', '/api/v1/stationservice/stations/namelist', '/api/v1/stationservice/stations/idlist', '/api/v1/stationservice', '/api/v1/stationservice/station/queryByIdForName', '/api/v1/stationservice/stations/{stationName}', '/api/v1/stationservice/stations/name/{stationIdForName}', '/api/v1/stationservice/stations/id/{stationNameForId}', '/api/v1/stationservice/welcome']"})
ts_auth_service = CClass(service, "ts-auth-service", stereotype_instances = [internal, basic_authentication, csrf_disabled, local_logging], tagged_values = {'Logging Technology': 'Lombok', 'Port': 12340, 'Endpoints': "['/api/v1/users/{userId}', '/api/v1/auth', '/api/v1/auth/hello', '/api/v1/users', '/api/v1/users/hello', '/api/v1/users/login']"})
ts_user_service = CClass(service, "ts-user-service", stereotype_instances = [internal, basic_authentication, csrf_disabled, local_logging], tagged_values = {'Port': 12346, 'Endpoints': "['/api/v1/userservice/users/{userName}', '/api/v1/userservice/users/id/{userId}', '/api/v1/userservice/users', '/api/v1/userservice/users/hello', '/api/v1/userservice/users/{userId}', '/api/v1/userservice/users/register']", 'Logging Technology': 'Lombok'})
ts_route_plan_service = CClass(service, "ts-route-plan-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Port': 14578, 'Endpoints': "['/api/v1/routeplanservice/routePlan/cheapestRoute', '/api/v1/routeplanservice/welcome', '/api/v1/routeplanservice/routePlan/minStopStations', '/api/v1/routeplanservice/routePlan/quickestRoute', '/api/v1/routeplanservice']"})
ts_ticketinfo_service = CClass(service, "ts-ticketinfo-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Endpoints': "['/api/v1/ticketinfoservice', '/api/v1/ticketinfoservice/welcome', '/api/v1/ticketinfoservice/ticketinfo', '/api/v1/ticketinfoservice/ticketinfo/{name}']", 'Port': 15681})
spring_transaction_producer = CClass(service, "spring-transaction-producer", stereotype_instances = [internal])
ts_payment_service = CClass(service, "ts-payment-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Endpoints': "['/api/v1/paymentservice/welcome', '/api/v1/paymentservice/payment/money', '/api/v1/paymentservice/payment', '/api/v1/paymentservice']", 'Port': 19001})
ts_inside_payment_service = CClass(service, "ts-inside-payment-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Endpoints': "['/api/v1/inside_pay_service', '/api/v1/inside_pay_service/inside_payment', '/api/v1/inside_pay_service/inside_payment/money', '/api/v1/inside_pay_service/inside_payment/{userId}/{money}', '/api/v1/inside_pay_service/inside_payment/account', '/api/v1/inside_pay_service/hello1_callback', '/api/v1/inside_pay_service/inside_payment/difference', '/api/v1/inside_pay_service/inside_payment/payment', '/api/v1/inside_pay_service/welcome', '/api/v1/inside_pay_service/inside_payment/drawback/{userId}/{money}']", 'Port': 18673})
rest_travel.service_update = CClass(service, "rest-travel.service-update", stereotype_instances = [internal], tagged_values = {'Port': 15100, 'Endpoints': "['/greeting']"})
sample_test_1 = CClass(service, "sample-test-1", stereotype_instances = [internal])
ts_seat_service = CClass(service, "ts-seat-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Endpoints': "['/api/v1/seatservice', '/api/v1/seatservice/seats', '/api/v1/seatservice/seats/left_tickets', '/api/v1/seatservice/welcome']", 'Port': 18898})
ts_execute_service = CClass(service, "ts-execute-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Endpoints': "['/api/v1/executeservice', '/api/v1/executeservice/execute/execute/{orderId}', '/api/v1/executeservice/execute/collected/{orderId}', '/api/v1/executeservice/welcome']", 'Port': 12386})
ts_travel_plan_service = CClass(service, "ts-travel-plan-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Port': 14322, 'Endpoints': "['/api/v1/travelplanservice/travelPlan/transferResult', '/api/v1/travelplanservice/welcome', '/api/v1/travelplanservice/travelPlan/minStation', '/api/v1/travelplanservice', '/api/v1/travelplanservice/travelPlan/cheapest', '/api/v1/travelplanservice/travelPlan/quickest']"})
ts_travel2_service = CClass(service, "ts-travel2-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Endpoints': "['/api/v1/travel2service/trip_detail', '/api/v1/travel2service/train_types/{tripId}', '/api/v1/travel2service/trips/left', '/api/v1/travel2service/travel2/queryWithPackage', '/api/v1/travel2service/trips', '/api/v1/travel2service/welcome', '/api/v1/travel2service', '/api/v1/travel2service/trips/{tripId}', '/api/v1/travel2service/trips/routes', '/api/v1/travel2service/admin_trip', '/api/v1/travel2service/routes/{tripId}']", 'Port': 16346})
ts_travel_service = CClass(service, "ts-travel-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Endpoints': "['/api/v1/travelservice/trips/left', '/api/v1/travelservice/package', '/api/v1/travelservice/trips/{tripId}', '/api/v1/travelservice', '/api/v1/travelservice/admin_trip', '/api/v1/travelservice/routes/{tripId}', '/api/v1/travelservice/trips', '/api/v1/travelservice/trip_detail', '/api/v1/travelservice/welcome', '/api/v1/travelservice/train_types/{tripId}', '/api/v1/travelservice/trips/routes']", 'Port': 12346})
ts_admin_order_service = CClass(service, "ts-admin-order-service", stereotype_instances = [internal, basic_authentication, csrf_disabled, local_logging], tagged_values = {'Endpoints': "['/api/v1/adminorderservice/adminorder/{orderId}/{trainNumber}', '/api/v1/adminorderservice', '/api/v1/adminorderservice/welcome', '/api/v1/adminorderservice/adminorder']", 'Port': 16112, 'Logging Technology': 'Lombok'})
ts_admin_travel_service = CClass(service, "ts-admin-travel-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Endpoints': "['/api/v1/admintravelservice/welcome', '/api/v1/admintravelservice/admintravel', '/api/v1/admintravelservice/admintravel/{tripId}', '/api/v1/admintravelservice']", 'Port': 16114})
ts_admin_route_service = CClass(service, "ts-admin-route-service", stereotype_instances = [internal, basic_authentication, csrf_disabled], tagged_values = {'Endpoints': "['/api/v1/adminrouteservice/welcome', '/api/v1/adminrouteservice/adminroute/{routeId}', '/api/v1/adminrouteservice/adminroute', '/api/v1/adminrouteservice']", 'Port': 16113})
kafka = CClass(service, "kafka", stereotype_instances = [message_broker, infrastructural], tagged_values = {'Message Broker': 'Kafka', 'Port': 2181})
rabbitmq = CClass(service, "rabbitmq", stereotype_instances = [message_broker, infrastructural], tagged_values = {'Port': 5672, 'Message Broker': 'RabbitMQ'})
zipkin = CClass(service, "zipkin", stereotype_instances = [infrastructural, tracing_server], tagged_values = {'Port': 9411, 'Tracing Server': 'Zipkin'})
mongodb = CClass(service, "mongodb", stereotype_instances = [infrastructural, tracing_server], tagged_values = {'Tracing Server': 'Zipkin', 'Port': 27017})
mail_server = CClass(external_component, "mail-server", stereotype_instances = [mail_server, entrypoint, exitpoint, plaintext_credentials], tagged_values = {'Username': 'fdse_microservices@163.com', 'Password': 'fdse1234', 'Host': 'smtp.163.com'})
add_links({rabbitmq: spring_transaction_consumer}, stereotype_instances = [restful_http, message_consumer_rabbitmq], tagged_values = {'Queue': 'async'})
add_links({kafka: rest_service_collector}, stereotype_instances = [message_consumer_kafka, restful_http], tagged_values = {'Consumer Topic': 'None'})
add_links({rest_service_collector: kafka}, stereotype_instances = [restful_http, message_producer_kafka], tagged_values = {'Producer Topic': 'app_log'})
add_links({ts_cancel_service: ts_notification_service}, stereotype_instances = [restful_http])
add_links({ts_cancel_service: ts_order_service}, stereotype_instances = [restful_http])
add_links({ts_cancel_service: ts_order_other_service}, stereotype_instances = [restful_http])
add_links({ts_cancel_service: ts_inside_payment_service}, stereotype_instances = [restful_http])
add_links({ts_cancel_service: ts_user_service}, stereotype_instances = [restful_http])
add_links({ts_order_other_service: ts_station_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_service: ts_ticketinfo_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_service: ts_seat_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_service: ts_notification_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_service: ts_user_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_service: ts_assurance_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_service: ts_station_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_service: ts_security_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_service: ts_travel_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_service: ts_contacts_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_service: ts_order_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_service: ts_food_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_service: ts_consign_service}, stereotype_instances = [restful_http])
add_links({ts_security_service: ts_order_service}, stereotype_instances = [restful_http])
add_links({ts_security_service: ts_order_other_service}, stereotype_instances = [restful_http])
add_links({ts_consign_service: ts_consign_price_service}, stereotype_instances = [restful_http])
add_links({ts_order_service: ts_station_service}, stereotype_instances = [restful_http])
add_links({ts_food_service: ts_food_map_service}, stereotype_instances = [restful_http])
add_links({ts_food_service: ts_travel_service}, stereotype_instances = [restful_http])
add_links({ts_food_service: ts_station_service}, stereotype_instances = [restful_http])
add_links({ts_rebook_service: ts_seat_service}, stereotype_instances = [restful_http])
add_links({ts_rebook_service: ts_station_service}, stereotype_instances = [restful_http])
add_links({ts_rebook_service: ts_inside_payment_service}, stereotype_instances = [restful_http])
add_links({ts_admin_basic_info_service: ts_contacts_service}, stereotype_instances = [restful_http])
add_links({ts_admin_basic_info_service: ts_station_service}, stereotype_instances = [restful_http])
add_links({ts_admin_basic_info_service: ts_train_service}, stereotype_instances = [restful_http])
add_links({ts_admin_basic_info_service: ts_config_service}, stereotype_instances = [restful_http])
add_links({ts_admin_basic_info_service: ts_price_service}, stereotype_instances = [restful_http])
add_links({ts_basic_service: ts_station_service}, stereotype_instances = [restful_http])
add_links({ts_basic_service: ts_train_service}, stereotype_instances = [restful_http])
add_links({ts_basic_service: ts_route_service}, stereotype_instances = [restful_http])
add_links({ts_basic_service: ts_price_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_other_service: ts_ticketinfo_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_other_service: ts_seat_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_other_service: ts_notification_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_other_service: ts_user_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_other_service: ts_assurance_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_other_service: ts_station_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_other_service: ts_security_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_other_service: ts_travel2_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_other_service: ts_contacts_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_other_service: ts_order_other_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_other_service: ts_food_service}, stereotype_instances = [restful_http])
add_links({ts_preserve_other_service: ts_consign_service}, stereotype_instances = [restful_http])
add_links({ts_auth_service: ts_verification_code_service}, stereotype_instances = [restful_http])
add_links({ts_user_service: ts_auth_service}, stereotype_instances = [restful_http])
add_links({ts_route_plan_service: ts_route_service}, stereotype_instances = [restful_http])
add_links({ts_route_plan_service: ts_travel_service}, stereotype_instances = [restful_http])
add_links({ts_route_plan_service: ts_travel2_service}, stereotype_instances = [restful_http])
add_links({ts_route_plan_service: ts_station_service}, stereotype_instances = [restful_http])
add_links({ts_ticketinfo_service: ts_basic_service}, stereotype_instances = [restful_http])
add_links({ts_inside_payment_service: ts_order_service}, stereotype_instances = [restful_http])
add_links({ts_inside_payment_service: ts_payment_service}, stereotype_instances = [restful_http])
add_links({ts_inside_payment_service: ts_order_other_service}, stereotype_instances = [restful_http])
add_links({ts_seat_service: ts_travel_service}, stereotype_instances = [restful_http])
add_links({ts_seat_service: ts_order_service}, stereotype_instances = [restful_http])
add_links({ts_seat_service: ts_travel2_service}, stereotype_instances = [restful_http])
add_links({ts_seat_service: ts_order_other_service}, stereotype_instances = [restful_http])
add_links({ts_seat_service: ts_config_service}, stereotype_instances = [restful_http])
add_links({ts_execute_service: ts_order_service}, stereotype_instances = [restful_http])
add_links({ts_execute_service: ts_order_other_service}, stereotype_instances = [restful_http])
add_links({ts_travel_plan_service: ts_seat_service}, stereotype_instances = [restful_http])
add_links({ts_travel_plan_service: ts_route_plan_service}, stereotype_instances = [restful_http])
add_links({ts_travel_plan_service: ts_travel_service}, stereotype_instances = [restful_http])
add_links({ts_travel_plan_service: ts_travel2_service}, stereotype_instances = [restful_http])
add_links({ts_travel_plan_service: ts_ticketinfo_service}, stereotype_instances = [restful_http])
add_links({ts_travel_plan_service: ts_station_service}, stereotype_instances = [restful_http])
add_links({ts_travel2_service: ts_ticketinfo_service}, stereotype_instances = [restful_http])
add_links({ts_travel2_service: ts_order_other_service}, stereotype_instances = [restful_http])
add_links({ts_travel2_service: ts_train_service}, stereotype_instances = [restful_http])
add_links({ts_travel2_service: ts_route_service}, stereotype_instances = [restful_http])
add_links({ts_travel2_service: ts_seat_service}, stereotype_instances = [restful_http])
add_links({ts_travel_service: ts_ticketinfo_service}, stereotype_instances = [restful_http])
add_links({ts_travel_service: ts_order_service}, stereotype_instances = [restful_http])
add_links({ts_travel_service: ts_train_service}, stereotype_instances = [restful_http])
add_links({ts_travel_service: ts_route_service}, stereotype_instances = [restful_http])
add_links({ts_travel_service: ts_seat_service}, stereotype_instances = [restful_http])
add_links({ts_admin_order_service: ts_order_service}, stereotype_instances = [restful_http])
add_links({ts_admin_order_service: ts_order_other_service}, stereotype_instances = [restful_http])
add_links({ts_admin_travel_service: ts_travel_service}, stereotype_instances = [restful_http])
add_links({ts_admin_travel_service: ts_travel2_service}, stereotype_instances = [restful_http])
add_links({ts_admin_route_service: ts_route_service}, stereotype_instances = [restful_http])
add_links({rest_service_5: rest_service_4}, stereotype_instances = [restful_http])
add_links({rest_service_2: rest_service_1}, stereotype_instances = [restful_http])
add_links({rest_service_3: rest_service_2}, stereotype_instances = [restful_http])
add_links({rest_service_3: rest_service_1}, stereotype_instances = [restful_http])
add_links({rest_service_3: rest_service_end}, stereotype_instances = [restful_http])
add_links({rest_service_3: rest_service_6}, stereotype_instances = [restful_http])
add_links({rest_service_4: rest_service_3}, stereotype_instances = [restful_http])
add_links({rest_service_6: rest_service_5}, stereotype_instances = [restful_http])
add_links({rest_service_6: rest_service_4}, stereotype_instances = [restful_http])
add_links({rest_service_6: rest_service_3}, stereotype_instances = [restful_http])
add_links({rest_service_1: rest_service_2}, stereotype_instances = [restful_http])
add_links({ts_rebook_service: ts_travel_service}, stereotype_instances = [restful_http])
add_links({ts_rebook_service: ts_order_service}, stereotype_instances = [restful_http])
add_links({ts_admin_user_service: ts_user_service}, stereotype_instances = [restful_http])
add_links({rest_service_5: rest_service_collector}, stereotype_instances = [restful_http])
add_links({rest_service_2: zipkin}, stereotype_instances = [restful_http])
add_links({rest_service_3: zipkin}, stereotype_instances = [restful_http])
add_links({rest_service_4: rest_service_collector}, stereotype_instances = [restful_http])
add_links({rest_service_1: zipkin}, stereotype_instances = [restful_http])
add_links({rest_service_6: rest_service_collector}, stereotype_instances = [restful_http])
add_links({rest_service_end: zipkin}, stereotype_instances = [restful_http])
add_links({ts_notification_service: mail_server}, stereotype_instances = [restful_http, plaintext_credentials_link])
model = CBundle(model_name, elements = mongodb.class_object.get_connected_elements())
def run():
    generator = PlantUMLGenerator()
    generator.plant_uml_jar_path = plantuml_path
    generator.directory = output_directory
    generator.object_model_renderer.left_to_right = True
    generator.generate_object_models(model_name, [model, {}])
    print(f"Generated models in {generator.directory!s}/" + model_name)
if __name__ == "__main__":
    run()