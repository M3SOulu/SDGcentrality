from codeable_models import CClass, CBundle, add_links, CStereotype, CMetaclass, CEnum, CAttribute 
from metamodels.microservice_dfds_metamodel import * 
from plant_uml_renderer import PlantUMLGenerator 
plantuml_path = "../../plantuml.jar" 
output_directory = "." 
model_name = "train-ticket_fa8d9ef"
ts_contacts_service = CClass(service, "ts-contacts-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 12347, 'Endpoints': "['/api/v1/contactservice/contacts/welcome', '/api/v1/contactservice', '/api/v1/contactservice/contacts', '/api/v1/contactservice/contacts/{id}', '/api/v1/contactservice/contacts/account/{accountId}', '/api/v1/contactservice/contacts/admin', '/api/v1/contactservice/contacts/{contactsId}']"})
ts_admin_user_service = CClass(service, "ts-admin-user-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Port': 16115, 'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/adminuserservice/users', '/api/v1/adminuserservice/users/welcome', '/api/v1/adminuserservice/users/{userId}']"})
ts_notification_service = CClass(service, "ts-notification-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/notifyservice/test_send_mq', '/api/v1/notifyservice/notification/preserve_success', '/api/v1/notifyservice/notification/order_changed_success', '/api/v1/notifyservice/notification/order_create_success', '/api/v1/notifyservice/welcome', '/api/v1/notifyservice/notification/order_cancel_success', '/api/v1/notifyservice/test_send_mail', '/api/v1/notifyservice']", 'Port': 17853})
ts_cancel_service = CClass(service, "ts-cancel-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 18885, 'Endpoints': "['/api/v1/cancelservice/welcome', '/api/v1/cancelservice/cancel/{orderId}/{loginId}', '/api/v1/cancelservice', '/api/v1/cancelservice/cancel/refound/{orderId}']"})
ts_config_service = CClass(service, "ts-config-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/configservice/configs', '/api/v1/configservice/configs/{configName}', '/api/v1/configservice', '/api/v1/configservice/welcome']", 'Port': 15679})
ts_assurance_service = CClass(service, "ts-assurance-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Endpoints': "['/api/v1/assuranceservice/assurances/{assuranceId}/{orderId}/{typeIndex}', '/api/v1/assuranceservice/welcome', '/api/v1/assuranceservice/assurances/orderid/{orderId}', '/api/v1/assuranceservice/assurance/orderid/{orderId}', '/api/v1/assuranceservice', '/api/v1/assuranceservice/assurances', '/api/v1/assuranceservice/assurances/types', '/api/v1/assuranceservice/assurances/assuranceid/{assuranceId}', '/api/v1/assuranceservice/assurances/{typeIndex}/{orderId}']", 'Load Balancer': 'Spring Cloud', 'Port': 18888})
ts_order_other_service = CClass(service, "ts-order-other-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 12032, 'Endpoints': "['/api/v1/orderOtherService/orderOther', '/api/v1/orderOtherService/orderOther/status/{orderId}/{status}', '/api/v1/orderOtherService/orderOther/{travelDate}/{trainNumber}', '/api/v1/orderOtherService', '/api/v1/orderOtherService/orderOther/price/{orderId}', '/api/v1/orderOtherService/orderOther/{orderId}', '/api/v1/orderOtherService/welcome', '/api/v1/orderOtherService/orderOther/query', '/api/v1/orderOtherService/orderOther/admin', '/api/v1/orderOtherService/orderOther/security/{checkDate}/{accountId}', '/api/v1/orderOtherService/orderOther/tickets', '/api/v1/orderOtherService/orderOther/orderPay/{orderId}', '/api/v1/orderOtherService/orderOther/refresh']"})
ts_route_service = CClass(service, "ts-route-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 11178, 'Endpoints': "['/api/v1/routeservice/welcome', '/api/v1/routeservice/routes/{start}/{end}', '/api/v1/routeservice', '/api/v1/routeservice/routes/byIds', '/api/v1/routeservice/routes/{routeId}', '/api/v1/routeservice/routes']"})
ts_price_service = CClass(service, "ts-price-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 16579, 'Endpoints': "['/api/v1/priceservice/prices/{routeId}/{trainType}', '/api/v1/priceservice/prices/{pricesId}', '/api/v1/priceservice/prices/welcome', '/api/v1/priceservice/prices/byRouteIdsAndTrainTypes', '/api/v1/priceservice/prices', '/api/v1/priceservice']"})
ts_preserve_service = CClass(service, "ts-preserve-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/preserveservice', '/api/v1/preserveservice/welcome', '/api/v1/preserveservice/preserve']", 'Port': 14568})
ts_security_service = CClass(service, "ts-security-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Port': 11188, 'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/securityservice/welcome', '/api/v1/securityservice/securityConfigs/{id}', '/api/v1/securityservice/securityConfigs/{accountId}', '/api/v1/securityservice/securityConfigs', '/api/v1/securityservice']"})
ts_consign_service = CClass(service, "ts-consign-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/consignservice/consigns/order/{id}', '/api/v1/consignservice/consigns/account/{id}', '/api/v1/consignservice/welcome', '/api/v1/consignservice/consigns', '/api/v1/consignservice/consigns/{consignee}', '/api/v1/consignservice']", 'Port': 16111})
ts_train_service = CClass(service, "ts-train-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 14567, 'Endpoints': "['/api/v1/trainservice/trains', '/api/v1/trainservice/trains/welcome', '/api/v1/trainservice', '/api/v1/trainservice/trains/byName/{name}', '/api/v1/trainservice/trains/{id}', '/api/v1/trainservice/trains/byNames']"})
ts_order_service = CClass(service, "ts-order-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/orderservice', '/api/v1/orderservice/order/query', '/api/v1/orderservice/order/status/{orderId}/{status}', '/api/v1/orderservice/order', '/api/v1/orderservice/order/price/{orderId}', '/api/v1/orderservice/order/refresh', '/api/v1/orderservice/order/admin', '/api/v1/orderservice/order/tickets', '/api/v1/orderservice/welcome', '/api/v1/orderservice/order/security/{checkDate}/{accountId}', '/api/v1/orderservice/order/{travelDate}/{trainNumber}', '/api/v1/orderservice/order/{orderId}', '/api/v1/orderservice/order/orderPay/{orderId}']", 'Port': 12031})
ts_verification_code_service = CClass(service, "ts-verification-code-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 15678, 'Endpoints': "['/api/v1/verifycode', '/api/v1/verifycode/verify/{verifyCode}', '/api/v1/verifycode/generate']"})
ts_food_service = CClass(service, "ts-food-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 18856, 'Endpoints': "['/api/v1/foodservice/test_send_delivery', '/api/v1/foodservice/foods/{date}/{startStation}/{endStation}/{tripId}', '/api/v1/foodservice/orders/{orderId}', '/api/v1/foodservice/createOrderBatch', '/api/v1/foodservice/orders', '/api/v1/foodservice/welcome', '/api/v1/foodservice']"})
ts_station_food_service = CClass(service, "ts-station-food-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Port': 18855, 'Endpoints': "['/api/v1/stationfoodservice', '/api/v1/stationfoodservice/stationfoodstores/{stationId}', '/api/v1/stationfoodservice/stationfoodstores/bystoreid/{stationFoodStoreId}', '/api/v1/stationfoodservice/stationfoodstores/welcome', '/api/v1/stationfoodservice/stationfoodstores']", 'Load Balancer': 'Spring Cloud'})
ts_rebook_service = CClass(service, "ts-rebook-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/rebookservice/welcome', '/api/v1/rebookservice/rebook/difference', '/api/v1/rebookservice/rebook', '/api/v1/rebookservice']", 'Port': 18886})
ts_train_food_service = CClass(service, "ts-train-food-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/trainfoodservice/trainfoods', '/api/v1/trainfoodservice/trainfoods/{tripId}', '/api/v1/trainfoodservice', '/api/v1/trainfoodservice/trainfoods/welcome']", 'Port': 19999})
ts_admin_basic_info_service = CClass(service, "ts-admin-basic-info-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 18767, 'Endpoints': "['/api/v1/adminbasicservice/adminbasic/configs', '/api/v1/adminbasicservice/adminbasic/trains', '/api/v1/adminbasicservice/adminbasic/configs/{name}', '/api/v1/adminbasicservice/adminbasic/stations', '/api/v1/adminbasicservice/adminbasic/trains/{id}', '/api/v1/adminbasicservice/adminbasic/contacts/{contactsId}', '/api/v1/adminbasicservice/adminbasic/prices/{pricesId}', '/api/v1/adminbasicservice/adminbasic/prices', '/api/v1/adminbasicservice/adminbasic/contacts', '/api/v1/adminbasicservice/adminbasic/stations/{id}', '/api/v1/adminbasicservice/welcome', '/api/v1/adminbasicservice']"})
ts_food_delivery_service = CClass(service, "ts-food-delivery-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 18957, 'Endpoints': "['/api/v1/fooddeliveryservice/orders/dtime', '/api/v1/fooddeliveryservice/orders/d/{orderId}', '/api/v1/fooddeliveryservice/orders/seatno', '/api/v1/fooddeliveryservice/orders/tripid', '/api/v1/fooddeliveryservice/orders', '/api/v1/fooddeliveryservice/welcome', '/api/v1/fooddeliveryservice/orders/all', '/api/v1/fooddeliveryservice', '/api/v1/fooddeliveryservice/orders/{orderId}', '/api/v1/fooddeliveryservice/orders/store/{storeId}']"})
ts_consign_price_service = CClass(service, "ts-consign-price-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Endpoints': "['/api/v1/consignpriceservice/consignprice', '/api/v1/consignpriceservice/consignprice/{weight}/{isWithinRegion}', '/api/v1/consignpriceservice/consignprice/price', '/api/v1/consignpriceservice/welcome', '/api/v1/consignpriceservice', '/api/v1/consignpriceservice/consignprice/config']", 'Port': 16110, 'Load Balancer': 'Spring Cloud'})
ts_wait_order_service = CClass(service, "ts-wait-order-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 17525, 'Endpoints': "['/api/v1/waitorderservice/welcome', '/api/v1/waitorderservice', '/api/v1/waitorderservice/waitlistorders', '/api/v1/waitorderservice/orders', '/api/v1/waitorderservice/order']"})
ts_basic_service = CClass(service, "ts-basic-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/basicservice/welcome', '/api/v1/basicservice/basic/travel', '/api/v1/basicservice/basic/{stationName}', '/api/v1/basicservice/basic/travels', '/api/v1/basicservice']", 'Port': 15680})
ts_preserve_other_service = CClass(service, "ts-preserve-other-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 14569, 'Endpoints': "['/api/v1/preserveotherservice/preserveOther', '/api/v1/preserveotherservice', '/api/v1/preserveotherservice/welcome']"})
ts_common = CClass(service, "ts-common", stereotype_instances = [internal, local_logging])
ts_station_service = CClass(service, "ts-station-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 12345, 'Endpoints': "['/api/v1/stationservice/stations/{stationsId}', '/api/v1/stationservice/stations/idlist', '/api/v1/stationservice/stations/namelist', '/api/v1/stationservice/stations', '/api/v1/stationservice', '/api/v1/stationservice/stations/name/{stationIdForName}', '/api/v1/stationservice/welcome', '/api/v1/stationservice/stations/id/{stationNameForId}']"})
ts_auth_service = CClass(service, "ts-auth-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/auth', '/api/v1/users', '/api/v1/users/hello', '/api/v1/users/login', '/api/v1/users/{userId}', '/api/v1/auth/hello']", 'Port': 12340})
ts_user_service = CClass(service, "ts-user-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 12346, 'Endpoints': "['/api/v1/userservice/users/id/{userId}', '/api/v1/userservice/users/{userId}', '/api/v1/userservice/users/register', '/api/v1/userservice/users/{userName}', '/api/v1/userservice/users', '/api/v1/userservice/users/hello']"})
ts_route_plan_service = CClass(service, "ts-route-plan-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/routeplanservice/routePlan/minStopStations', '/api/v1/routeplanservice/routePlan/cheapestRoute', '/api/v1/routeplanservice/welcome', '/api/v1/routeplanservice', '/api/v1/routeplanservice/routePlan/quickestRoute']", 'Port': 14578})
ts_gateway_service = CClass(service, "ts-gateway-service", stereotype_instances = [infrastructural, gateway], tagged_values = {'Gateway': 'Spring Cloud Gateway', 'Port': 18888})
ts_payment_service = CClass(service, "ts-payment-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Port': 19001, 'Endpoints': "['/api/v1/paymentservice/payment', '/api/v1/paymentservice/welcome', '/api/v1/paymentservice/payment/money', '/api/v1/paymentservice']", 'Load Balancer': 'Spring Cloud'})
ts_inside_payment_service = CClass(service, "ts-inside-payment-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/inside_pay_service/inside_payment/account', '/api/v1/inside_pay_service', '/api/v1/inside_pay_service/inside_payment/drawback/{userId}/{money}', '/api/v1/inside_pay_service/inside_payment/money', '/api/v1/inside_pay_service/inside_payment', '/api/v1/inside_pay_service/welcome', '/api/v1/inside_pay_service/inside_payment/difference', '/api/v1/inside_pay_service/inside_payment/{userId}/{money}', '/api/v1/inside_pay_service/inside_payment/payment']", 'Port': 18673})
ts_ui_test = CClass(service, "ts-ui-test", stereotype_instances = [internal])
micro_service_monitoring_core = CClass(service, "micro-service-monitoring-core", stereotype_instances = [internal, local_logging])
ts_delivery_service = CClass(service, "ts-delivery-service", stereotype_instances = [load_balancer, internal, local_logging], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 18808})
ts_seat_service = CClass(service, "ts-seat-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 18898, 'Endpoints': "['/api/v1/seatservice', '/api/v1/seatservice/welcome', '/api/v1/seatservice/seats', '/api/v1/seatservice/seats/left_tickets']"})
ts_execute_service = CClass(service, "ts-execute-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Port': 12386, 'Endpoints': "['/api/v1/executeservice/welcome', '/api/v1/executeservice/execute/collected/{orderId}', '/api/v1/executeservice', '/api/v1/executeservice/execute/execute/{orderId}']", 'Load Balancer': 'Spring Cloud'})
ts_travel_plan_service = CClass(service, "ts-travel-plan-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Port': 14322, 'Endpoints': "['/api/v1/travelplanservice', '/api/v1/travelplanservice/welcome', '/api/v1/travelplanservice/travelPlan/cheapest', '/api/v1/travelplanservice/travelPlan/minStation', '/api/v1/travelplanservice/travelPlan/quickest', '/api/v1/travelplanservice/travelPlan/transferResult']"})
ts_travel2_service = CClass(service, "ts-travel2-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Port': 16346, 'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/travel2service/welcome', '/api/v1/travel2service/routes/{tripId}', '/api/v1/travel2service/train_types/{tripId}', '/api/v1/travel2service/trip_detail', '/api/v1/travel2service/admin_trip', '/api/v1/travel2service/trips/{tripId}', '/api/v1/travel2service/trips', '/api/v1/travel2service/trips/left', '/api/v1/travel2service', '/api/v1/travel2service/trips/routes']"})
ts_travel_service = CClass(service, "ts-travel-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/travelservice/trips', '/api/v1/travelservice', '/api/v1/travelservice/trip_detail', '/api/v1/travelservice/trips/left', '/api/v1/travelservice/admin_trip', '/api/v1/travelservice/trips/{tripId}', '/api/v1/travelservice/welcome', '/api/v1/travelservice/trips/left_parallel', '/api/v1/travelservice/routes/{tripId}', '/api/v1/travelservice/train_types/{tripId}', '/api/v1/travelservice/trips/routes']", 'Port': 12346})
ts_admin_order_service = CClass(service, "ts-admin-order-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/adminorderservice/welcome', '/api/v1/adminorderservice/adminorder', '/api/v1/adminorderservice/adminorder/{orderId}/{trainNumber}', '/api/v1/adminorderservice']", 'Port': 16112})
ts_admin_travel_service = CClass(service, "ts-admin-travel-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/admintravelservice/welcome', '/api/v1/admintravelservice', '/api/v1/admintravelservice/admintravel/{tripId}', '/api/v1/admintravelservice/admintravel']", 'Port': 16114})
ts_admin_route_service = CClass(service, "ts-admin-route-service", stereotype_instances = [load_balancer, basic_authentication, csrf_disabled, local_logging, internal], tagged_values = {'Load Balancer': 'Spring Cloud', 'Endpoints': "['/api/v1/adminrouteservice/welcome', '/api/v1/adminrouteservice/adminroute/{routeId}', '/api/v1/adminrouteservice/adminroute', '/api/v1/adminrouteservice']", 'Port': 16113})
ts_config_mongo = CClass(service, "ts-config-mongo", stereotype_instances = [internal])
ts_security_mongo = CClass(service, "ts-security-mongo", stereotype_instances = [internal])
ts_consign_mongo = CClass(service, "ts-consign-mongo", stereotype_instances = [internal])
ts_food_map_mongo = CClass(service, "ts-food-map-mongo", stereotype_instances = [internal])
ts_travel_mongo = CClass(service, "ts-travel-mongo", stereotype_instances = [internal])
ts_route_mongo = CClass(service, "ts-route-mongo", stereotype_instances = [internal])
ts_food_mongo = CClass(service, "ts-food-mongo", stereotype_instances = [internal])
ts_voucher_mysql = CClass(service, "ts-voucher-mysql", stereotype_instances = [internal], tagged_values = {'Port': 3306})
ts_user_mongo = CClass(service, "ts-user-mongo", stereotype_instances = [internal])
ts_inside_payment_mongo = CClass(service, "ts-inside-payment-mongo", stereotype_instances = [internal])
ts_order_mongo = CClass(service, "ts-order-mongo", stereotype_instances = [internal])
ts_rebook_mongo = CClass(service, "ts-rebook-mongo", stereotype_instances = [internal])
ts_station_mongo = CClass(service, "ts-station-mongo", stereotype_instances = [internal])
ts_contacts_mongo = CClass(service, "ts-contacts-mongo", stereotype_instances = [internal])
ts_payment_mongo = CClass(service, "ts-payment-mongo", stereotype_instances = [internal])
ts_account_mongo = CClass(service, "ts-account-mongo", stereotype_instances = [internal])
ts_assurance_mongo = CClass(service, "ts-assurance-mongo", stereotype_instances = [internal])
ts_ticket_office_mongo = CClass(service, "ts-ticket-office-mongo", stereotype_instances = [internal])
ts_order_other_mongo = CClass(service, "ts-order-other-mongo", stereotype_instances = [internal])
ts_price_mongo = CClass(service, "ts-price-mongo", stereotype_instances = [internal])
ts_consign_price_mongo = CClass(service, "ts-consign-price-mongo", stereotype_instances = [internal])
ts_auth_mongo = CClass(service, "ts-auth-mongo", stereotype_instances = [internal])
ts_travel2_mongo = CClass(service, "ts-travel2-mongo", stereotype_instances = [internal])
ts_train_mongo = CClass(service, "ts-train-mongo", stereotype_instances = [internal])
ts_news_mongo = CClass(service, "ts-news-mongo", stereotype_instances = [internal])
prometheus_server = CClass(service, "prometheus_server", stereotype_instances = [infrastructural, metrics_server], tagged_values = {'Metrics Server': 'Prometheus'})
database_ts_contacts_service = CClass(external_component, "database-ts-contacts-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Username': 'CONTACTS_MYSQL_USER:root', 'Database': 'MySQL', 'Password': 'CONTACTS_MYSQL_PASSWORD:Abcd1234#'})
database_ts_notification_service = CClass(external_component, "database-ts-notification-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Password': 'NOTIFICATION_MYSQL_PASSWORD:root', 'Username': 'NOTIFICATION_MYSQL_USER:root', 'Database': 'MySQL'})
database_ts_config_service = CClass(external_component, "database-ts-config-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Password': 'CONFIG_MYSQL_PASSWORD:root', 'Database': 'MySQL', 'Username': 'CONFIG_MYSQL_USER:root'})
database_ts_assurance_service = CClass(external_component, "database-ts-assurance-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Username': 'ASSURANCE_MYSQL_USER:root', 'Database': 'MySQL', 'Password': 'ASSURANCE_MYSQL_PASSWORD:root'})
database_ts_order_other_service = CClass(external_component, "database-ts-order-other-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Username': 'ORDER_OTHER_MYSQL_USER:root', 'Database': 'MySQL', 'Password': 'ORDER_OTHER_MYSQL_PASSWORD:root'})
database_ts_route_service = CClass(external_component, "database-ts-route-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Password': 'ROUTE_MYSQL_PASSWORD:Abcd1234#', 'Database': 'MySQL', 'Username': 'ROUTE_MYSQL_USER:root'})
database_ts_price_service = CClass(external_component, "database-ts-price-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Username': 'PRICE_MYSQL_USER:root', 'Database': 'MySQL', 'Password': 'PRICE_MYSQL_PASSWORD:Abcd1234#'})
database_ts_security_service = CClass(external_component, "database-ts-security-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Password': 'SECURITY_MYSQL_PASSWORD:root', 'Username': 'SECURITY_MYSQL_USER:root', 'Database': 'MySQL'})
database_ts_consign_service = CClass(external_component, "database-ts-consign-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Username': 'CONSIGN_MYSQL_USER:root', 'Database': 'MySQL', 'Password': 'CONSIGN_MYSQL_PASSWORD:root'})
database_ts_train_service = CClass(external_component, "database-ts-train-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Username': 'TRAIN_MYSQL_USER:root', 'Database': 'MySQL', 'Password': 'TRAIN_MYSQL_PASSWORD:Abcd1234#'})
database_ts_order_service = CClass(external_component, "database-ts-order-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Password': 'ORDER_MYSQL_PASSWORD:Abcd1234#', 'Username': 'ORDER_MYSQL_USER:root', 'Database': 'MySQL'})
database_ts_food_service = CClass(external_component, "database-ts-food-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Password': 'FOOD_MYSQL_PASSWORD:root', 'Database': 'MySQL', 'Username': 'FOOD_MYSQL_USER:root'})
database_ts_station_food_service = CClass(external_component, "database-ts-station-food-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Username': 'STATION_FOOD_MYSQL_USER:root', 'Password': 'STATION_FOOD_MYSQL_PASSWORD:Abcd1234#', 'Database': 'MySQL'})
database_ts_train_food_service = CClass(external_component, "database-ts-train-food-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Username': 'TRAIN_FOOD_MYSQL_USER:root', 'Password': 'TRAIN_FOOD_MYSQL_PASSWORD:root', 'Database': 'MySQL'})
database_ts_food_delivery_service = CClass(external_component, "database-ts-food-delivery-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Username': 'FOOD_DELIVERY_MYSQL_USER:root', 'Password': 'FOOD_DELIVERY_MYSQL_PASSWORD:root', 'Database': 'MySQL'})
database_ts_consign_price_service = CClass(external_component, "database-ts-consign-price-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Password': 'CONSIGN_PRICE_MYSQL_PASSWORD:Abcd1234#', 'Database': 'MySQL', 'Username': 'CONSIGN_PRICE_MYSQL_USER:root'})
database_ts_wait_order_service = CClass(external_component, "database-ts-wait-order-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Username': 'WAIT_ORDER_MYSQL_USER:root', 'Password': 'WAIT_ORDER_PASSWORD:Abcd1234#', 'Database': 'MySQL'})
database_ts_station_service = CClass(external_component, "database-ts-station-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Username': 'STATION_MYSQL_USER:root', 'Database': 'MySQL', 'Password': 'STATION_MYSQL_PASSWORD:Abcd1234#'})
database_ts_auth_service = CClass(external_component, "database-ts-auth-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Username': 'AUTH_MYSQL_USER:root', 'Password': 'AUTH_MYSQL_PASSWORD:Abcd1234#', 'Database': 'MySQL'})
database_ts_user_service = CClass(external_component, "database-ts-user-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Password': 'USER_MYSQL_PASSWORD:Abcd1234#', 'Database': 'MySQL', 'Username': 'USER_MYSQL_USER:root'})
database_ts_payment_service = CClass(external_component, "database-ts-payment-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Password': 'PAYMENT_MYSQL_PASSWORD:Abcd1234#', 'Username': 'PAYMENT_MYSQL_USER:root', 'Database': 'MySQL'})
database_ts_inside_payment_service = CClass(external_component, "database-ts-inside-payment-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Password': 'INSIDE_PAYMENT_MYSQL_PASSWORD:Abcd1234#', 'Database': 'MySQL', 'Username': 'INSIDE_PAYMENT_MYSQL_USER:root'})
database_ts_delivery_service = CClass(external_component, "database-ts-delivery-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Database': 'MySQL', 'Username': 'DELIVERY_MYSQL_USER:root', 'Password': 'DELIVERY_MYSQL_PASSWORD:Abcd1234#'})
database_ts_travel2_service = CClass(external_component, "database-ts-travel2-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Username': 'TRAVEL2_MYSQL_USER:root', 'Password': 'TRAVEL2_MYSQL_PASSWORD:Abcd1234#', 'Database': 'MySQL'})
database_ts_travel_service = CClass(external_component, "database-ts-travel-service", stereotype_instances = [plaintext_credentials, entrypoint, exitpoint, external_database], tagged_values = {'Username': 'TRAVEL_MYSQL_USER:root', 'Password': 'TRAVEL_MYSQL_PASSWORD:root', 'Database': 'MySQL'})
user = CClass(external_component, "user", stereotype_instances = [user_stereotype, entrypoint, exitpoint])
mail_server = CClass(external_component, "mail-server", stereotype_instances = [plaintext_credentials, mail_server, entrypoint, exitpoint], tagged_values = {'Username': '${email_address:trainticket_notify@163.com}', 'Host': 'smtp.163.com', 'Password': '${email_password:GZKSCXHBOLKMCLDQ}'})
add_links({ts_cancel_service: ts_notification_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_cancel_service: ts_order_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_cancel_service: ts_order_other_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_cancel_service: ts_inside_payment_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_cancel_service: ts_user_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_order_other_service: ts_station_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_service: ts_basic_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_service: ts_seat_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_service: ts_user_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_service: ts_assurance_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_service: ts_station_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_service: ts_security_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_service: ts_travel_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_service: ts_contacts_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_service: ts_order_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_service: ts_food_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_service: ts_consign_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_security_service: ts_order_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_security_service: ts_order_other_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_consign_service: ts_consign_price_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_order_service: ts_station_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_food_service: ts_train_food_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_food_service: ts_travel_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_food_service: ts_station_food_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_rebook_service: ts_seat_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_rebook_service: ts_travel_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_rebook_service: ts_order_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_rebook_service: ts_train_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_rebook_service: ts_route_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_rebook_service: ts_inside_payment_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_admin_basic_info_service: ts_contacts_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_admin_basic_info_service: ts_station_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_admin_basic_info_service: ts_train_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_admin_basic_info_service: ts_config_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_admin_basic_info_service: ts_price_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_food_delivery_service: ts_station_food_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_basic_service: ts_station_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_basic_service: ts_train_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_basic_service: ts_route_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_basic_service: ts_price_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_other_service: ts_basic_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_other_service: ts_seat_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_other_service: ts_user_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_other_service: ts_assurance_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_other_service: ts_station_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_other_service: ts_security_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_other_service: ts_travel2_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_other_service: ts_contacts_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_other_service: ts_order_other_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_other_service: ts_food_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_preserve_other_service: ts_consign_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_auth_service: ts_verification_code_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_route_plan_service: ts_route_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_route_plan_service: ts_travel_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_route_plan_service: ts_travel2_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_inside_payment_service: ts_order_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_inside_payment_service: ts_payment_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_inside_payment_service: ts_order_other_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_seat_service: ts_order_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_seat_service: ts_order_other_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_seat_service: ts_config_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_execute_service: ts_order_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_execute_service: ts_order_other_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_travel_plan_service: ts_seat_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_travel_plan_service: ts_route_plan_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_travel_plan_service: ts_travel_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_travel_plan_service: ts_travel2_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_travel_plan_service: ts_train_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_travel2_service: ts_basic_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_travel2_service: ts_train_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_travel2_service: ts_route_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_travel2_service: ts_seat_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_travel_service: ts_basic_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_travel_service: ts_train_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_travel_service: ts_route_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_travel_service: ts_seat_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_admin_order_service: ts_order_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_admin_order_service: ts_order_other_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_admin_travel_service: ts_travel_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_admin_travel_service: ts_travel2_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_admin_travel_service: ts_station_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_admin_travel_service: ts_train_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_admin_travel_service: ts_route_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_admin_route_service: ts_route_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({ts_admin_route_service: ts_station_service}, stereotype_instances = [load_balanced_link, restful_http], tagged_values = {'Load Balancer': 'Spring Cloud'})
add_links({database_ts_contacts_service: ts_contacts_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Username': 'CONTACTS_MYSQL_USER:root', 'Password': 'CONTACTS_MYSQL_PASSWORD:Abcd1234#'})
add_links({database_ts_notification_service: ts_notification_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Password': 'NOTIFICATION_MYSQL_PASSWORD:root', 'Username': 'NOTIFICATION_MYSQL_USER:root'})
add_links({database_ts_config_service: ts_config_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Password': 'CONFIG_MYSQL_PASSWORD:root', 'Username': 'CONFIG_MYSQL_USER:root'})
add_links({database_ts_assurance_service: ts_assurance_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Username': 'ASSURANCE_MYSQL_USER:root', 'Password': 'ASSURANCE_MYSQL_PASSWORD:root'})
add_links({database_ts_order_other_service: ts_order_other_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Username': 'ORDER_OTHER_MYSQL_USER:root', 'Password': 'ORDER_OTHER_MYSQL_PASSWORD:root'})
add_links({database_ts_route_service: ts_route_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Password': 'ROUTE_MYSQL_PASSWORD:Abcd1234#', 'Username': 'ROUTE_MYSQL_USER:root'})
add_links({database_ts_price_service: ts_price_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Username': 'PRICE_MYSQL_USER:root', 'Password': 'PRICE_MYSQL_PASSWORD:Abcd1234#'})
add_links({database_ts_security_service: ts_security_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Password': 'SECURITY_MYSQL_PASSWORD:root', 'Username': 'SECURITY_MYSQL_USER:root'})
add_links({database_ts_consign_service: ts_consign_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Username': 'CONSIGN_MYSQL_USER:root', 'Password': 'CONSIGN_MYSQL_PASSWORD:root'})
add_links({database_ts_train_service: ts_train_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Username': 'TRAIN_MYSQL_USER:root', 'Password': 'TRAIN_MYSQL_PASSWORD:Abcd1234#'})
add_links({database_ts_order_service: ts_order_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Password': 'ORDER_MYSQL_PASSWORD:Abcd1234#', 'Username': 'ORDER_MYSQL_USER:root'})
add_links({database_ts_food_service: ts_food_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Password': 'FOOD_MYSQL_PASSWORD:root', 'Username': 'FOOD_MYSQL_USER:root'})
add_links({database_ts_station_food_service: ts_station_food_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Username': 'STATION_FOOD_MYSQL_USER:root', 'Password': 'STATION_FOOD_MYSQL_PASSWORD:Abcd1234#'})
add_links({database_ts_train_food_service: ts_train_food_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Username': 'TRAIN_FOOD_MYSQL_USER:root', 'Password': 'TRAIN_FOOD_MYSQL_PASSWORD:root'})
add_links({database_ts_food_delivery_service: ts_food_delivery_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Username': 'FOOD_DELIVERY_MYSQL_USER:root', 'Password': 'FOOD_DELIVERY_MYSQL_PASSWORD:root'})
add_links({database_ts_consign_price_service: ts_consign_price_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Password': 'CONSIGN_PRICE_MYSQL_PASSWORD:Abcd1234#', 'Username': 'CONSIGN_PRICE_MYSQL_USER:root'})
add_links({database_ts_wait_order_service: ts_wait_order_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Username': 'WAIT_ORDER_MYSQL_USER:root', 'Password': 'WAIT_ORDER_PASSWORD:Abcd1234#'})
add_links({database_ts_station_service: ts_station_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Username': 'STATION_MYSQL_USER:root', 'Password': 'STATION_MYSQL_PASSWORD:Abcd1234#'})
add_links({database_ts_auth_service: ts_auth_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Username': 'AUTH_MYSQL_USER:root', 'Password': 'AUTH_MYSQL_PASSWORD:Abcd1234#'})
add_links({database_ts_user_service: ts_user_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Password': 'USER_MYSQL_PASSWORD:Abcd1234#', 'Username': 'USER_MYSQL_USER:root'})
add_links({database_ts_payment_service: ts_payment_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Password': 'PAYMENT_MYSQL_PASSWORD:Abcd1234#', 'Username': 'PAYMENT_MYSQL_USER:root'})
add_links({database_ts_inside_payment_service: ts_inside_payment_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Password': 'INSIDE_PAYMENT_MYSQL_PASSWORD:Abcd1234#', 'Username': 'INSIDE_PAYMENT_MYSQL_USER:root'})
add_links({database_ts_delivery_service: ts_delivery_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Username': 'DELIVERY_MYSQL_USER:root', 'Password': 'DELIVERY_MYSQL_PASSWORD:Abcd1234#'})
add_links({database_ts_travel2_service: ts_travel2_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Username': 'TRAVEL2_MYSQL_USER:root', 'Password': 'TRAVEL2_MYSQL_PASSWORD:Abcd1234#'})
add_links({database_ts_travel_service: ts_travel_service}, stereotype_instances = [jdbc, plaintext_credentials_link], tagged_values = {'Username': 'TRAVEL_MYSQL_USER:root', 'Password': 'TRAVEL_MYSQL_PASSWORD:root'})
add_links({user: ts_gateway_service}, stereotype_instances = [restful_http])
add_links({ts_gateway_service: user}, stereotype_instances = [restful_http])
add_links({ts_notification_service: mail_server}, stereotype_instances = [plaintext_credentials_link, restful_http])
model = CBundle(model_name, elements = prometheus_server.class_object.get_connected_elements())
def run():
    generator = PlantUMLGenerator()
    generator.plant_uml_jar_path = plantuml_path
    generator.directory = output_directory
    generator.object_model_renderer.left_to_right = True
    generator.generate_object_models(model_name, [model, {}])
    print(f"Generated models in {generator.directory!s}/" + model_name)
if __name__ == "__main__":
    run()